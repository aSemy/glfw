name: Build GLFW latest

# Build https://github.com/glfw/glfw/
# The cmake commands are from:
# https://github.com/glfw/glfw/blob/master/.appveyor.yml
# Windows image is used here 'just in case'. From what I gather the 
# resulting .dll is system agnostic, but I don't really know.
 
on:
  push:
  workflow_dispatch:

defaults:
  run:
    shell: bash
    
env:
  build_flags: -DBUILD_SHARED_LIBS=ON
    
jobs:

  build_glfw:
    runs-on: windows-latest
          
    steps:
    
      # checkout copy of glfw project
    - name: 'Project checkout ${{github.repository}}'
      uses: actions/checkout@v2
      
      # get the version number for glfw
    - name: Parse build options
      id: glfw_build_opts
      run: |
        version=`awk -F " " '/GLFW VERSION/{print $(NF-2)}' < ./CMakeLists.txt`
        version=`echo $version | tr -cd '[:graph:]' | tr -sc '[:alnum:]' _`
        echo "Extracted GLFW version $version"
        echo "::set-output name=version::$version"


####### run the build
   
#     - name: Create Build Environment
      # create a folder - 'build' - into which GLFW will be built
#       run: cmake -E make_directory build

    - name: Configure CMake
      run: |
        echo "::group::cmake, with flags ${{ env.build_flags}}"
        cmake -DCMAKE_MESSAGE_LOG_LEVEL=DEBUG -S . -B build -G "Visual Studio 16 2019" ${{ env.build_flags}} 
        echo "::endgroup::"
    
    - name: cmake -LAH
      run: |
        echo "::group::cmake -LAH"
        cmake -LAH  
        echo "::endgroup::"
        echo "::group::cmake -B build -LAH"
        cmake -B build -LAH 
        echo "::endgroup::"
        
    
    - name: cmake build
      # build into the 'build' directory
      run: |
        echo "::group::cmake --build build" 
        cmake --build build 
        echo "::endgroup::"
        
######## make and upload tars for dll and build folder
        
    - name: 'generate tar for dll'
      id: dll_tar
      run: |
        tar_name="dll-v${{ steps.glfw_build_opts.outputs.version }}.tar"
        find ./build -name "*dll" -print0 | tar -cvf $tar_name --null -T -
        tar -cvf $tar_name -C build/src/Debug glfw3.dll
        echo "::set-output name=tar_name::$tar_name"
        
    - name: 'Upload artifact ${{ steps.dll_tar.outputs.tar_name }}'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.dll_tar.outputs.tar_name }}
        path: ${{ steps.dll_tar.outputs.tar_name }}
        
    - name: 'generate tar for build folder'
      id: build_tar
      run: |
        tar_name="build-v${{ steps.glfw_build_opts.outputs.version }}.tar"
        tar -cvf $tar_name -C build $(ls build)
        echo "::set-output name=tar_name::$tar_name"
        
    - name: 'Upload artifact ${{ steps.build_tar.outputs.tar_name }}'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.build_tar.outputs.tar_name }}
        path: ${{ steps.build_tar.outputs.tar_name }}

######## create a release, upload artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{github.run_number}}_${{ github.ref }}_${{ github.sha }}"
        release_name: "Release for v${{ steps.glfw_build_opts.outputs.version }} (${{ job.status }})"
        body: |
            Build flags: `${{ env.build_flags}}`
            
            ${{ steps.dll_tar.outputs.tar_name   }} hash: `${{ hashFiles(steps.dll_tar.outputs.tar_name)   }}`
            ${{ steps.build_tar.outputs.tar_name }} hash: `${{ hashFiles(steps.build_tar.outputs.tar_name) }}`
            
            Run number: ${{github.run_number}}
            github.ref: ${{ github.ref }} 
            
        draft: false
        prerelease: true
        
    - name: 'Upload Release Asset ${{ steps.dll_tar.outputs.tar_name }}'
      id: upload-release-asset-dll-tar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ steps.dll_tar.outputs.tar_name }}
        asset_name: ${{ steps.dll_tar.outputs.tar_name }}
        asset_content_type: application/x-tar

        
    - name: 'Upload Release Asset ${{ steps.build_tar.outputs.tar_name }}'
      id: upload-release-asset-build-tar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ steps.build_tar.outputs.tar_name }}
        asset_name: ${{ steps.build_tar.outputs.tar_name }}
        asset_content_type: application/x-tar
