name: CMake GLFW latest

# The cmake commands are from:
# https://github.com/glfw/glfw/blob/master/.appveyor.yml
# Windows image is used 'just in case'. From what I gather the 
# resulting .dll is system agnostic, but I don't really know.

# run this build on any edit in the repo
on:
  push:
  workflow_dispatch:
    inputs:
      isFullBuild:
        description: 'True: Build all files (docs, tests, examples), False: just dll'
        required: true
        default: false

env:
  # Key for glfw version, and file that contains it
  cmake_lists_file:     ./CMakeLists.txt
  # build options
  GLFW_SLIM_BUILD_FLAGS: -DBUILD_SHARED_LIBS=ON -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF
  GLFW_FULL_BUILD_FLAGS: -DBUILD_SHARED_LIBS=ON -DGLFW_BUILD_EXAMPLES=ON  -DGLFW_BUILD_TESTS=ON  -DGLFW_BUILD_DOCS=ON 

defaults:
  run:
    shell: bash
    working-directory: ./glfwworkflow
    
jobs:
  build_glfw:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    
      # checkout your project
    - name: 'Project checkout ${{github.repository}}'
      uses: actions/checkout@v2
      
    - name: Set build options
      id: glfw_build_opts
      run: |
        pwd
        ls ${{ env.cmake_lists_file }}
        more ${{ env.cmake_lists_file }}
        version = awk -F " " '/GLFW VERSION/{print $(NF-2)}' < ${{ env.cmake_lists_file }}
        echo "::set-output name=version::$version"
        if [ $INPUT_ISFULLBUILD }} ] then
          echo "::set-output name=flags::$GLFW_SLIM_BUILD_FLAGS"
        else
          echo "::set-output name=flags::$GLFW_FULL_BUILD_FLAGS"
        
    - name: Print job details
      run: |
        [ -n ${{ github.event_name }} ] && echo 'Event: ${{ github.event_name }}; fi'
        [ -n ${{ github.actor }} ]      && echo 'User: ${{ github.actor }};       fi'
        echo "Repo head ref: ${{ github.head_ref }}"
        echo "Full build:    ${{ github.event.inputs.fullBuild }}"
        echo "Build options: ${{ steps.glfw_build_opts }}"

    - name: Create Build Environment
      # create a folder - 'build' - into which GLFW will be build
      run: cmake -E make_directory build

    - name: Configure CMake
      # BUILD_SHARED_LIBS=ON builds the .dll - =OFF might be suitable for other situations?
      run: cmake -S . -B build -G "Visual Studio 16 2019" ${{ steps.glfw_build_opts.flags }}

    - name: cmake build
      # build into the 'build' directory
      run: cmake --build build
  
    - uses: actions/upload-artifact@v2
      # why is the .dll in a 'Debug' folder?
      with:
        path: build/src/Debug/glfw3.dll 
        
    - name: 'Upload build folder v${{ steps.glfw_build_opts.version }}'
      # 
      uses: actions/upload-artifact@v2
      with:
        name: 'build_v${{ steps.glfw_build_opts.version }}'
        path: build/ 
        
