name: Build GLFW latest

# Build https://github.com/glfw/glfw/
# The cmake commands are from:
# https://github.com/glfw/glfw/blob/master/.appveyor.yml
# Windows image is used here 'just in case'. From what I gather the 
# resulting .dll is system agnostic, but I don't really know.
 
# run this build...
on:
  # on any edit in the repo
  push:
  # or manually
  workflow_dispatch:
    inputs:
      extrasGen:
        description: 'False: DLL only. True: Build extras (examples, tests, docs).'
        required: false
        default: false

defaults:
  run:
    shell: bash
    
jobs:

  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix_include: ${{ steps.prep.outputs.matrix }}
    steps:
      - id: prep
        shell: python
        run: | 
            import json
            matrix = []
            dll = {
                "build_flags": "-DBUILD_SHARED_LIBS=ON -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF",
                "upload_target": "./build/src/Debug/glfw3.dll",
                "upload_name_prefix": "glfw3.dll"
            }
            matrix.append(dll)
            if [ ${{ github.event.inputs.extrasGen }} ] :
                extras = {
                   "build_flags": "-DBUILD_SHARED_LIBS=OFF -DGLFW_BUILD_EXAMPLES=ON  -DGLFW_BUILD_TESTS=ON  -DGLFW_BUILD_DOCS=ON",
                   "upload_target": "./build/",
                   "upload_name_prefix": "build_dir"
                }
                matrix.append(extras)
            matrix = json.dumps(matrix)
            print(matrix)
            print(f"::set-output name=matrix::{matrix}")
      - run: echo ${{ steps.prep.outputs.matrix }}

  build_glfw:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    needs: prepare
    
    strategy:
      matrix: 
        include: ${{fromJson(needs.prepare.outputs.matrix_include)}}
    
#       matrix:
#         target: ['dll', 'extras']
#         exclude: ${{ env.test }}
#         include: 
#             # Build dll
#           - target: 'dll'
#             build_flags: '-DBUILD_SHARED_LIBS=ON -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF'
#             # why is the .dll in a 'Debug' folder?
#             upload_target: ./build/src/Debug/glfw3.dll
#             upload_name_prefix: glfw3.dll
#             # Build examples, tests, docs
#           - target: 'extras'
#             build_flags: '-DBUILD_SHARED_LIBS=OFF -DGLFW_BUILD_EXAMPLES=ON  -DGLFW_BUILD_TESTS=ON  -DGLFW_BUILD_DOCS=ON'
#             upload_target: ./build/
#             upload_name_prefix: build_dir
          
            
    ###
    
    steps:
    
      # checkout your copy of glfw project
    - name: 'Project checkout ${{github.repository}}'
      uses: actions/checkout@v2
      
    - name: Print job and repo details
      run: |
        [ -n ${{ github.event_name }} ] && echo 'Event: ${{ github.event_name }}'
        [ -n ${{ github.actor }} ]      && echo 'User: ${{ github.actor }}'
        echo "Repo head ref: ${{ github.head_ref }}"
        echo "Build flags:   ${{ matrix.build_flags }}"
        
        echo $(git status)
        git remote add glfw_main https://github.com/glfw/glfw.git
        echo $(git status -sb glfw_main/master)
        echo $(git status glfw_main/master)
        echo "localCMakeLists:   "$(git log -1 --pretty="format:%ci" CMakeLists.txt)
        echo "remote CMakeLists: "$(git log -1 --pretty="format:%ci" glfwmain/master -- CMakeLists.txt)
    
    - name: debug
      run: |
        pwd
        echo "::group::{tree pwd}"
        tree.com //a //f
        echo "::endgroup::"
        ls ${{ env.cmake_lists_file }}
        echo "::group::{head cmake_lists_file}"
        head -5 ${{ env.cmake_lists_file }}
        echo "::endgroup::"

    - name: Set build options
      id: glfw_build_opts
      run: |
        echo "::group::{cmake -N -L}"
        cmake -N -L -B build
        echo "::endgroup::"
        echo "::group::{cmake -N -LA}"
        cmake -N -LA -B build
        echo "::endgroup::"
        echo "::group::{cmake -N -LH}"
        cmake -N -LH -B build
        echo "::endgroup::"
        version=`awk -F " " '/GLFW VERSION/{print $(NF-2)}' < ./CMakeLists.txt`
        echo "Extracted GLFW version $version"
        echo "::set-output name=version::$version"

    - name: Create Build Environment
      # create a folder - 'build' - into which GLFW will be built
      run: cmake -E make_directory build

    - name: Configure CMake
      run: |
        echo "::group::cmake, with flags ${{ matrix.build_flags }}"
        cmake -S . -B build -G "Visual Studio 16 2019" ${{ matrix.build_flags }}
        echo "::endgroup::"

    - name: cmake build
      # build into the 'build' directory
      run: |
        echo "::group::cmake --build build"
        cmake --build build
        echo "::endgroup::"
        
    - name: 'generate artifact tar for ${{ matrix.upload_target }}'
      id: tar_gen
      run: |
        tar_name="${{ matrix.upload_name_prefix }}-v${{ steps.glfw_build_opts.outputs.version }}.tar"
        tar -cvf $tar_name ${{ matrix.upload_target }}
        echo "::set-output name=tar_name::$tar_name"
        
    - name: 'Upload artifact ${{ steps.tar_gen.outputs.tar_name }}'
      uses: actions/upload-artifact@v2
      with:
        name: '${{ steps.tar_gen.outputs.tar_name }}'
        path: '${{ steps.tar_gen.outputs.tar_name }}'

