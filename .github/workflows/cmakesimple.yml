name: Build GLFW latest

# Build https://github.com/glfw/glfw/
# The cmake commands are from:
# https://github.com/glfw/glfw/blob/master/.appveyor.yml
# Windows image is used here 'just in case'. From what I gather the 
# resulting .dll is system agnostic, but I don't really know.
 
on:
  push:
  workflow_dispatch:

defaults:
  run:
    shell: bash
    
jobs:

  build_glfw:
    runs-on: windows-latest
          
    steps:
    
      # checkout your copy of glfw project
    - name: 'Project checkout ${{github.repository}}'
      uses: actions/checkout@v2
          
    - name: Parse build options
      id: glfw_build_opts
      run: |
        version=`awk -F " " '/GLFW VERSION/{print $(NF-2)}' < ./CMakeLists.txt`
        version=`echo $version | tr -cd '[:graph:]' | tr -sc '[:alnum:]' _`
        echo "Extracted GLFW version $version"
        echo "::set-output name=version::$version"

    - name: Create Build Environment
      # create a folder - 'build' - into which GLFW will be built
      run: cmake -E make_directory build

    - name: Configure CMake
      run: |
        echo "::group::cmake, with flags -DBUILD_SHARED_LIBS=ON"
        cmake -S . -B build -G "Visual Studio 16 2019" -DBUILD_SHARED_LIBS=ON
        echo "::endgroup::"
        
    - name: cmake build
      # build into the 'build' directory
      run: |
        echo "::group::cmake --build build"
        cmake --build build
        echo "::endgroup::"
        
        ###
        
    - name: 'generate tar for dll'
      id: dll_tar
      run: |
        tar_name="dll-v${{ steps.glfw_build_opts.outputs.version }}.tar"
        tar -cvf $tar_name -C build/src/Debug/glfw3.dll
        echo "::set-output name=tar_name::$tar_name"
        
    - name: 'Upload ${{ steps.dll_tar.outputs.tar_name }}'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.dll_tar.outputs.tar_name }}
        path: ${{ steps.dll_tar.outputs.tar_name }}
        
        ###
        
    - name: 'generate tar for build folder'
      id: build_tar
      run: |
        tar_name="build-v${{ steps.glfw_build_opts.outputs.version }}.tar"
        tar -cvf $tar_name -C build $(ls build)
        echo "::set-output name=tar_name::$tar_name"
        
    - name: 'Upload ${{ steps.build_tar.outputs.tar_name }}'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.build_tar.outputs.tar_name }}
        path: ${{ steps.build_tar.outputs.tar_name }}
